services:
  db:
    image: postgres:15
    container_name: CI_CD_postgres
    ports:
      - "5433:5433"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=sonar
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra-network

  sonarqube:
    image: sonarqube:9.9.2-community
    container_name: CI_CD_sonarqube
    ports:
      - "9001:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5433/sonar
      - SONAR_JDBC_USERNAME=admin
      - SONAR_JDBC_PASSWORD=admin
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - infra-network
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: CI_CD_jenkins
    privileged: true
    user: root
    ports:
      - "8082:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/local/bin/docker
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - JAVA_OPTS="-Djenkins.install.runSetupWizard=false"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - infra-network

networks:
  infra-network:
    driver: bridge

volumes:
  postgres_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  jenkins_home: