pipeline {
    agent any

    tools {
        maven 'Maven'
        jdk 'JDK17'
    }

    environment {
        DOCKER_IMAGE = 'banking-system'
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONAR_TOKEN = credentials('sonar-token')

    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        deleteDir()
                        echo "Cloning Git repository..."
                        checkout([$class: 'GitSCM',
                            branches: [[name: '*/Jenkins']],
                            userRemoteConfigs: [[
                                url: 'https://github.com/cajty/Banking-Security.git'
                            ]]
                        ])
                        echo "Repository cloned successfully."
                    } catch (Exception e) {
                        error "Failed to clone repository: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Environment Check') {
            steps {
                script {
                    try {
                        sh '''
                            echo "Git version:"
                            git --version
                            echo "Current Git branch:"
                            git branch --show-current
                            echo "Git status:"
                            git status
                            echo "Java version:"
                            java -version
                            echo "Maven version:"
                            mvn -version
                            echo "Working directory contents:"
                            pwd
                            ls -la
                        '''
                    } catch (Exception e) {
                        error "Environment check failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    try {
                        steps {
                                sh 'mvn clean install'
                            }
                    } catch (Exception e) {
                        error "Build failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    try {
                        withMaven(maven: 'Maven') {
                            sh 'mvn test'
                        }
                    } catch (Exception e) {
                        error "Unit tests failed: ${e.getMessage()}"
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    jacoco(
                        execPattern: '**/target/jacoco.exec',
                        classPattern: '**/target/classes',
                        sourcePattern: '**/src/main/java'
                    )
                }
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                    try {
                        withSonarQubeEnv('SonarQube') {
                            withMaven(maven: 'Maven') {
                                sh '''
                                    mvn sonar:sonar \
                                    -Dsonar.projectKey=banking-system \
                                    -Dsonar.projectName=BankingSystem \
                                    -Dsonar.host.url=http://sonarqube:9000 \
                                    -Dsonar.login=${SONAR_TOKEN}
                                '''
                            }
                        }
                        timeout(time: 2, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }
                    } catch (Exception e) {
                        error "Code quality analysis failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Manual Approval') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    input message: 'Deploy to production?', ok: 'Proceed'
                }
            }
        }
    }

    post {
        always {
            script {
                try {
                    deleteDir()
                    emailext (
                        subject: "Pipeline Status: ${currentBuild.result}",
                        body: """
                            Pipeline Status: ${currentBuild.result}
                            Job: ${env.JOB_NAME}
                            Build Number: ${env.BUILD_NUMBER}
                            Build URL: ${env.BUILD_URL}
                        """,
                        to: 'ayoubbly41@gmail.com',
                        attachLog: true
                    )
                } catch (Exception e) {
                    echo "Post-build actions failed: ${e.getMessage()}"
                }
            }
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline execution failed!'
        }
    }
}